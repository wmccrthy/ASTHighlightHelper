1. Nit fixes:
    - print tag first (maybe print tag next to node key in format like nodeKey: (tag: "tagName")) (SOLVED)
    - indentation is not consistent btwn expandable nodes and non-expandable nodes (this needs to be fixed as it complicates readability and clarity of the tree structure) (SOLVED)
    - include luau type info (along with tag, helps better understand the tree nodes and their attributes) (SOLVED)
    - account for context-aware type resolution (SOLVED)
    - refactor type annotations data (astTypeDefinitions.ts and type_annotations.lua) to scrape directly from Luau type definitions file
        - this should also make the type annotations more accurate and consistent
        - also want to show ? for optional properties
        - TEMPORARILY SOLVED by manually filling out type definitions to be more complete

    - show tag/kind at the top of node children

    - clean up front end code, a ton of slop and repitition

2. Fix inclusion of removals in annotated AST diffing output

3. Distribute among team members, get feedback and take note of bugs

4. Add additional features:
    - Hovering AST node highlights corresponding code in editor
        - not sure how to implement...
    - Edit AST node -> code updates in editor 
        - (might be easier, than highlight feature)
        - can get JSON from AST, decode into table
        - use @std/syntax/printer to output decoded JSON as src code
        - set code editor value to this src code
        - can start off very simple:
            - just edit primitive leaf values
            - eventually, can add support for removing nodes, adding nodes, etc
    - ...

5. CI pipeline
    - gated checks
    - versioning
        - start out with just building/packaging and publishing the vsix file in releases
    - testing




Determine if optional type property given a type table:
    - in type table
    - for each entry in typeTable.entries, check if entry.value.tag == "union"
    - if so, check if entry.value.types[#entry.value.types].node.tag == "optional"
    - then, entry is optional

For this parsing, almost every type we care abt is a type table,

